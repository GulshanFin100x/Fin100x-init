// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Advisor {
  id              String    @id @default(uuid())
  imageUrl        String
  salutation      String
  firstName       String
  lastName        String
  designation     String
  yearsExperience Int       @default(0)
  expertiseTags   String[]
  certificate     String
  fees            Float    @default(0)   // in INR
  email           String?   @unique  //++ Suyash
  calenderId      String?   @unique //++ Suyash
  // Relations
  reviews         Review[]   // one advisor can have many reviews
  meetings     Meeting[]    //++ Suyash
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  rating    Float
  comment   String?

  // Foreign keys
  advisorId String
  userId    String

  // Relations
  advisor   Advisor  @relation(fields: [advisorId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([advisorId, userId])  // ✅ ensures 1 review per user per advisor
}

model User {
  id           String    @id @default(uuid())
  phone        String    @unique
  phoneMasked  String
  name         String?
  language     String    @default("en-IN")
  referralCode String?
  isNew        Boolean   @default(true)
  kycStatus    KycStatus @default(none)
  lastQuizTakenAt DateTime?
  totalQuizzes    Int           @default(0) 
  redeemPoints    Int           @default(0) 

  email           String? @unique

  session      Session?
  conversations Conversation[]
  messages      Message[]
  reviews       Review[]
  assets        UserAsset?    

  meetings     Meeting[]    //++ Suyash

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

enum KycStatus {
  none
  pending
  verified
}

model UserAsset {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])

  income      Float    @default(0)
  expenses    Float    @default(0)
  savings     Float    @default(0)
  netWorth    Float    @default(0)
  cashFlow    Float    @default(0)
  loans       Float    @default(0)
  insurance   Float    @default(0)
  taxSavings  Float    @default(0)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OTPRequest {
  id        String   @id                  // requestId, e.g., "req_xxx"
  phone     String
  otpHash   String                         // bcrypt hash of OTP
  deviceId  String?
  channel   String   @default("sms")
  locale    String   @default("en-IN")
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Session {
  id               String   @id @default(cuid())
  userId           String   @unique           // single active session per user
  refreshTokenHash String
  deviceId         String?
  revoked          Boolean  @default(false)
  expiresAt        DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id        String   @id @default(uuid())
  title     String
  userId    String   // ✅ FK to User
  messages  Message[]
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id               String   @id @default(uuid())
  conversationId   String
  userId           String   // ✅ FK to User
  message_query    String
  message_response String
  is_bot           Boolean  @default(false)
  is_encrypted     Boolean  @default(false)
  createdAt        DateTime @default(now())

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Quiz {
  id        Int        @id @default(autoincrement())
  title     String
  questions Question[]
  createdAt DateTime   @default(now())
}

model Question {
  id        Int      @id @default(autoincrement())
  quizId    Int
  quiz      Quiz     @relation(fields: [quizId], references: [id])

  text      String
  optionA   String
  optionB   String
  optionC   String
  optionD   String
  correct   String   // store the correct answer as string (e.g. "optionC")

  createdAt DateTime @default(now())
}


model Banner {
  id          String   @id @default(uuid())
  title       String
  imageUrl    String   // store fileName like "banner1.png"
  redirectUrl String   // e.g. "https://paytm.com/upi-offer"
  screen      String   // e.g. "home", "quiz", "advisor"
  validFrom   DateTime @default(now())
  validTill   DateTime
  isActive    Boolean  @default(true)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model GlossaryTerm {
  id          String   @id @default(uuid())
  tag         String   // e.g., "nifty", "roi"
  word        String   // e.g., "50", "Diversification"
  definition  String   // explanation of the word

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

//Start of changes by Suyash
model Meeting {
  id          Int      @id @default(autoincrement())
  userId      String
  advisorId   String
  meetLink    String
  eventId     String   // Optional Google event ID
  startTime   DateTime
  endTime     DateTime
  conferenceRecordId String? // Add this for Google Meet Conference Record
  transcript      String?
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
  advisor     Advisor  @relation(fields: [advisorId], references: [id])
}
//End of changes by Suyash


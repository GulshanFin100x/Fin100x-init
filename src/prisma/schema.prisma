generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Advisor {
  id              String    @id @default(uuid())
  salutation      String
  firstName       String
  lastName        String
  designation     String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  expertiseTags   String[]
  yearsExperience Int       @default(0)
  certificate     String
  fees            Float     @default(0)
  imageUrl        String
  email           String    @unique
  calendarId      String    @default("primary")
  meetings        Meeting[]
  reviews         Review[]
}

model Review {
  id        String   @id @default(uuid())
  rating    Float
  comment   String?
  advisorId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  advisor   Advisor  @relation(fields: [advisorId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([advisorId, userId])
}

model User {
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  id              String         @id @default(uuid())
  imageUrl       String?
  isNew           Boolean        @default(true)
  kycStatus       KycStatus      @default(none)
  language        String         @default("en-IN")
  name            String?
  phone           String         @unique
  phoneMasked     String
  referralCode    String?
  lastQuizTakenAt DateTime?
  redeemPoints    Int            @default(0)
  totalQuizzes    Int            @default(0)
  email           String?        @unique
  conversations   Conversation[]
  meetings        Meeting[]
  messages        Message[]
  reviews         Review[]
  session         Session?
  assets          UserAsset?
  financialData   FinancialData[]
}

model UserAsset {
  id         String   @id @default(uuid())
  userId     String   @unique
  income     Float    @default(0)
  expenses   Float    @default(0)
  savings    Float    @default(0)
  netWorth   Float    @default(0)
  cashFlow   Float    @default(0)
  loans      Float    @default(0)
  insurance  Float    @default(0)
  taxSavings Float    @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

model OTPRequest {
  id        String   @id
  phone     String
  otpHash   String
  deviceId  String?
  channel   String   @default("sms")
  locale    String   @default("en-IN")
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Session {
  id               String   @id @default(cuid())
  userId           String   @unique
  refreshTokenHash String
  deviceId         String?
  revoked          Boolean  @default(false)
  expiresAt        DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id        String    @id @default(uuid())
  title     String
  createdAt DateTime  @default(now())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
}

model Message {
  id               String       @id @default(uuid())
  conversationId   String
  message_query    String
  message_response String
  is_bot           Boolean      @default(false)
  is_encrypted     Boolean      @default(false)
  createdAt        DateTime     @default(now())
  userId           String
  conversation     Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Quiz {
  id        Int        @id @default(autoincrement())
  title     String
  createdAt DateTime   @default(now())
  questions Question[]
}

model Question {
  id        Int      @id @default(autoincrement())
  quizId    Int
  text      String
  optionA   String
  optionB   String
  optionC   String
  optionD   String
  correct   String
  createdAt DateTime @default(now())
  quiz      Quiz     @relation(fields: [quizId], references: [id])
}

model Banner {
  id          String   @id @default(uuid())
  title       String
  imageUrl    String
  redirectUrl String
  screen      String
  validFrom   DateTime @default(now())
  validTill   DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model GlossaryTerm {
  id         String   @id @default(uuid())
  tag        String
  word       String
  definition String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Meeting {
  id                 Int      @id @default(autoincrement())
  userId             String
  advisorId          String
  meetLink           String
  eventId            String
  startTime          DateTime
  endTime            DateTime
  conferenceRecordId String?
  transcript         String?
  createdAt          DateTime @default(now())
  advisor            Advisor  @relation(fields: [advisorId], references: [id])
  user               User     @relation(fields: [userId], references: [id])
}

model AgentSession {
  session_id String         @id @db.VarChar
  created_at DateTime       @default(now()) @db.Timestamp(6)
  updated_at DateTime       @default(now()) @db.Timestamp(6)
  messages   AgentMessage[]

  @@map("agent_sessions")
}

model AgentMessage {
  id           Int          @id @default(autoincrement())
  session_id   String       @db.VarChar
  message_data String
  created_at   DateTime     @default(now()) @db.Timestamp(6)
  session      AgentSession @relation(fields: [session_id], references: [session_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([session_id, created_at], map: "idx_agent_messages_session_time")
  @@map("agent_messages")
}

enum KycStatus {
  none
  pending
  verified
}

model FinancialData {
  id                   Int      @id @default(autoincrement())
  userId               String   
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

 monthlySavings       Int      @default(0)
  sipInvestments       Int      @default(0)
  totalAssets          Int      @default(0)
  totalLoans           Int      @default(0)
  monthlyEmi           Int      @default(0)
  creditCardOutstanding Int     @default(0)
  insuranceCoverage    Int      @default(0)
  taxSavings           Int      @default(0)
  retirementFund       Int      @default(0)
  monthlyIncome        Int      @default(0)
  monthlyExpenses      Int      @default(0)
  savingsRatio         Float     @default(0)
  score                Int?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}